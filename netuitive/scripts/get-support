#!/opt/netuitive-agent/embedded/bin/python
# coding=utf-8

import os
import platform
import psutil
import re
import logging
import datetime
import json
import zipfile
import shutil
import socket

try:
    import netuitive
except ImportError:
    netuitive = None

try:
    import docker
except ImportError:
    docker = None


def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))


def get_human_readable_size(num, suffix='B'):
    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:
        if abs(num) < 1024.0:
            return(("%3.2f %s%s" % (num, unit, suffix)).strip())
        num /= 1024.0
    return(("%.2f %s%s" % (num, 'Y', suffix)).strip())


def check_lsb():

    if os.path.isfile("/etc/lsb-release"):
        try:
            _distributor_id_file_re = re.compile(
                "(?:DISTRIB_ID\s*=)\s*(.*)", re.I)
            _release_file_re = re.compile(
                "(?:DISTRIB_RELEASE\s*=)\s*(.*)", re.I)
            _codename_file_re = re.compile(
                "(?:DISTRIB_CODENAME\s*=)\s*(.*)", re.I)
            with open("/etc/lsb-release", "rU") as etclsbrel:
                for line in etclsbrel:
                    m = _distributor_id_file_re.search(line)
                    if m:
                        _u_distname = m.group(1).strip()
                    m = _release_file_re.search(line)
                    if m:
                        _u_version = m.group(1).strip()
                    m = _codename_file_re.search(line)
                    if m:
                        _u_id = m.group(1).strip()
                if _u_distname and _u_version:
                    return (_u_distname, _u_version, _u_id)
        except Exception as e:
            logging.debug(e)
            return(None)

    else:
        return(None)


def _get_version():
    """
    Return version string
    """

    if os.path.isfile('/opt/netuitive-agent/version-manifest.txt'):
        with open('/opt/netuitive-agent/version-manifest.txt', 'r') as f:
            v = f.readline()

        f.close()

        ret = v.replace(' ', '_').lower().rstrip()

    return(ret)


def _add_sys_meta():
    try:

        ret = {}
        ret['platform'] = platform.system()
        ret['agent'] = _get_version()

        if psutil:
            ret['cpus'] = psutil.cpu_count()

            mem = psutil.virtual_memory()

            ret[
                'ram'] = get_human_readable_size(mem.total)
            ret['ram bytes'] = mem.total
            ret[
                'boottime'] = str(datetime.datetime.fromtimestamp(psutil.boot_time()))

        if platform.system().startswith('Linux'):
            if check_lsb() is None:
                supported_dists = platform._supported_dists + ('system',)
                dist = platform.linux_distribution(
                    supported_dists=supported_dists)

            else:
                dist = check_lsb()

            ret['distribution_name'] = str(dist[0])
            ret[
                'distribution_version'] = str(dist[1])
            if dist[2] != '':
                ret['distribution_id'] = str(dist[2])

        return(ret)

    except Exception as e:
        logging.debug(e)
        pass


def _add_docker_meta():
    ret = "not_installed"
    if docker:
        try:

            ret = {}
            cc = docker.Client(
                base_url='unix://var/run/docker.sock', version='auto')
            dockerver = cc.version()

            for k, v in dockerver.items():

                if type(v) is list:
                    vl = ', '.join(v)
                    v = vl
                ret['docker_' + k] = v

        except Exception as e:
            logging.debug(e)
            pass

    return(ret)

if __name__ == "__main__":

    print('\nCollecting logs and configuration....\n')

    timestamp = str(datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
    supportzip = '/opt/netuitive-agent/support-' + timestamp + '.zip'

    data = {}
    data['support_timestamp'] = timestamp
    data['hostname'] = socket.gethostname()
    data['metadata'] = _add_sys_meta()
    data['docker'] = _add_docker_meta()

    if os.path.exists('/opt/netuitive-agent/support'):
        shutil.rmtree('/opt/netuitive-agent/support/')

    if not os.path.exists('/opt/netuitive-agent/support'):
        os.makedirs('/opt/netuitive-agent/support')

    with open('/opt/netuitive-agent/support/metadata.json', 'w') as f:
        f.write(json.dumps(data, indent=4))

    f.close()

    shutil.copy('/opt/netuitive-agent/version-manifest.txt',
                '/opt/netuitive-agent/support/version-manifest.txt')

    shutil.copy('/opt/netuitive-agent/version-manifest.json',
                '/opt/netuitive-agent/support/version-manifest.json')

    shutil.copytree('/opt/netuitive-agent/conf/',
                    '/opt/netuitive-agent/support/conf')

    shutil.copytree('/opt/netuitive-agent/log/',
                    '/opt/netuitive-agent/support/log')

    print('creating zip file....\n')
    zipf = zipfile.ZipFile(supportzip,
                           'w', zipfile.ZIP_DEFLATED)
    zipdir('/opt/netuitive-agent/support/', zipf)
    zipf.close()

    shutil.rmtree('/opt/netuitive-agent/support/')

    print('Please open a support case and upload {0}'.format(supportzip))
    print('with a detailed description of the issue.\n')
    print('Thank you\n')
